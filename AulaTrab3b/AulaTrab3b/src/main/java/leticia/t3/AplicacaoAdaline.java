package leticia.t3;

import java.awt.Color;
import static java.lang.Math.PI;
import static java.lang.Math.cos;
import static java.lang.Math.random;
import static java.lang.Math.sin;
import java.util.List;
import java.util.function.Function;
import javax.swing.JOptionPane;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.Styler;
import org.knowm.xchart.style.lines.SeriesLines;
import org.knowm.xchart.style.markers.SeriesMarkers;

public class AplicacaoAdaline extends javax.swing.JFrame {

    private static final String TITULO_GRAFICO = "Neurônio Adaline";

    private static final String SERIE_S1 = "Sinal 1 (Modelo)";
    private static final String SERIE_LS = "Limite Superior";
    private static final String SERIE_LI = "Limite Inferior";
    private static final String SERIE_S2 = "Sinal 2 (Neurônio)";

    private Adaline neuronio;
    private double[] angulos;
    private Function<Double, Double> funcao;

    private XYChart chart;
    private XYSeries lsSeries, liSeries, s1Series, s2Series;
    private XChartPanel<XYChart> chartPanel;

    public AplicacaoAdaline() {
        initComponents();
        initModelo();
        initGrafico();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGrafico = new javax.swing.JPanel();
        pnlControles = new javax.swing.JPanel();
        pnlFuncoes = new javax.swing.JPanel();
        cmbFuncao = new javax.swing.JComboBox<>();
        spnLimSup = new javax.swing.JSpinner();
        lblLimSup = new javax.swing.JLabel();
        lblLimInf = new javax.swing.JLabel();
        spnLimInf = new javax.swing.JSpinner();
        btnTestarLimites = new javax.swing.JButton();
        pnlNeuronio = new javax.swing.JPanel();
        btnNovoNeuronio = new javax.swing.JButton();
        lblTaxa = new javax.swing.JLabel();
        txtTaxa = new javax.swing.JTextField();
        txtMaxCiclos = new javax.swing.JTextField();
        lblMaxCiclos = new javax.swing.JLabel();
        lblN = new javax.swing.JLabel();
        spnN = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Combinação Linear com Adaline");

        pnlGrafico.setLayout(new java.awt.BorderLayout());

        pnlFuncoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Funções"));

        cmbFuncao.setEditable(true);
        cmbFuncao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "fn", "f7", "f8", "f9", "f10", "f11", "f12", "f13" }));
        cmbFuncao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFuncaoActionPerformed(evt);
            }
        });

        spnLimSup.setModel(new javax.swing.SpinnerNumberModel(0.4d, -6.0d, 6.0d, 0.1d));
        spnLimSup.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnLimSupStateChanged(evt);
            }
        });

        lblLimSup.setText("Lim. Sup.");

        lblLimInf.setText("Lim. Inf.");

        spnLimInf.setModel(new javax.swing.SpinnerNumberModel(-0.8d, -6.0d, 6.0d, 0.1d));
        spnLimInf.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnLimInfStateChanged(evt);
            }
        });

        btnTestarLimites.setText("Testar Limites");
        btnTestarLimites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestarLimitesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFuncoesLayout = new javax.swing.GroupLayout(pnlFuncoes);
        pnlFuncoes.setLayout(pnlFuncoesLayout);
        pnlFuncoesLayout.setHorizontalGroup(
            pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTestarLimites, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbFuncao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFuncoesLayout.createSequentialGroup()
                        .addGroup(pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFuncoesLayout.createSequentialGroup()
                                .addGap(0, 1, Short.MAX_VALUE)
                                .addComponent(lblLimSup))
                            .addGroup(pnlFuncoesLayout.createSequentialGroup()
                                .addComponent(lblLimInf)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnLimInf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spnLimSup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlFuncoesLayout.setVerticalGroup(
            pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnLimSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLimSup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFuncoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnLimInf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLimInf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTestarLimites)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlNeuronio.setBorder(javax.swing.BorderFactory.createTitledBorder("Neurônio"));

        btnNovoNeuronio.setText("Novo");
        btnNovoNeuronio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoNeuronioActionPerformed(evt);
            }
        });

        lblTaxa.setText("Taxa");

        txtTaxa.setText("0.1");

        txtMaxCiclos.setText("20");

        lblMaxCiclos.setText("Max");

        lblN.setText("N");

        spnN.setModel(new javax.swing.SpinnerNumberModel(45, 1, 360, 1));

        javax.swing.GroupLayout pnlNeuronioLayout = new javax.swing.GroupLayout(pnlNeuronio);
        pnlNeuronio.setLayout(pnlNeuronioLayout);
        pnlNeuronioLayout.setHorizontalGroup(
            pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNeuronioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNovoNeuronio, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addGroup(pnlNeuronioLayout.createSequentialGroup()
                        .addGroup(pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTaxa)
                            .addComponent(lblMaxCiclos)
                            .addComponent(lblN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnN)
                            .addComponent(txtMaxCiclos)
                            .addComponent(txtTaxa))))
                .addContainerGap())
        );
        pnlNeuronioLayout.setVerticalGroup(
            pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNeuronioLayout.createSequentialGroup()
                .addComponent(btnNovoNeuronio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTaxa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNeuronioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaxCiclos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxCiclos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlControlesLayout = new javax.swing.GroupLayout(pnlControles);
        pnlControles.setLayout(pnlControlesLayout);
        pnlControlesLayout.setHorizontalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFuncoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlNeuronio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlControlesLayout.setVerticalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFuncoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlNeuronio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initModelo() throws NumberFormatException {
        int n = (int) spnN.getValue();
        double taxa = Double.parseDouble(txtTaxa.getText());
        int maxCiclos = Integer.parseInt(txtMaxCiclos.getText());
        neuronio = ProgramAdaline.getNeuronioTreinado(n, taxa, maxCiclos);
    }

    private void initGrafico() {
        chart = new XYChartBuilder().theme(Styler.ChartTheme.Matlab).title(TITULO_GRAFICO).build();
        chart.getStyler().setDefaultSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Line);
        chart.getStyler().setInfoPanelVisible(true);

        angulos = ProgramAdaline.getX();
        funcao = this::fn;
        double[] ys1 = ProgramAdaline.getY(angulos, ProgramAdaline::f);
        double[] yls = ProgramAdaline.getY(angulos, x -> (double) spnLimSup.getValue());
        double[] yli = ProgramAdaline.getY(angulos, x -> (double) spnLimInf.getValue());
        double[] ys2 = ProgramAdaline.getY(angulos, funcao);

        s1Series = chart.addSeries(SERIE_S1, angulos, ys1);
        lsSeries = chart.addSeries(SERIE_LS, angulos, yls);
        liSeries = chart.addSeries(SERIE_LI, angulos, yli);
        s2Series = chart.addSeries(SERIE_S2, angulos, ys2);

        s1Series.setMarker(SeriesMarkers.NONE).setLineColor(Color.RED);
        lsSeries.setMarker(SeriesMarkers.NONE).setLineColor(Color.ORANGE).setLineStyle(SeriesLines.DASH_DASH);
        liSeries.setMarker(SeriesMarkers.NONE).setLineColor(Color.ORANGE).setLineStyle(SeriesLines.DASH_DASH);
        s2Series.setXYSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Scatter).setMarkerColor(Color.BLUE);
        chart.getStyler().setMarkerSize(3);

        chartPanel = new XChartPanel<>(chart);
        pnlGrafico.add(chartPanel);
        pack();
    }

    private void cmbFuncaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFuncaoActionPerformed
        switch ((String) cmbFuncao.getSelectedItem()) {
            case "fn":
                funcao = this::fn;
                break;
            case "f7":
                funcao = this::f7;
                break;
            case "f8":
                funcao = this::f8;
                break;
            case "f9":
                funcao = this::f9;
                break;
            case "f10":
                funcao = this::f10;
                break;
            case "f11":
                funcao = this::f11;
                break;
            case "f12":
                funcao = this::f12;
                break;
            case "f13":
                funcao = this::f13;
                break;
        }
        double[] ys2 = ProgramAdaline.getY(angulos, funcao);
        s2Series.replaceData(angulos, ys2, null);
        chartPanel.repaint();
    }//GEN-LAST:event_cmbFuncaoActionPerformed

    private void spnLimSupStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnLimSupStateChanged
        double[] yls = ProgramAdaline.getY(angulos, x -> (double) spnLimSup.getValue());
        lsSeries.replaceData(angulos, yls, null);
        chartPanel.repaint();
    }//GEN-LAST:event_spnLimSupStateChanged

    private void spnLimInfStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnLimInfStateChanged
        double[] yli = ProgramAdaline.getY(angulos, x -> (double) spnLimInf.getValue());
        liSeries.replaceData(angulos, yli, null);
        chartPanel.repaint();
    }//GEN-LAST:event_spnLimInfStateChanged

    private void btnTestarLimitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestarLimitesActionPerformed
        double limSup = (double) spnLimSup.getValue();
        double limInf = (double) spnLimInf.getValue();

        boolean dentroLimites = true;
        for (double x = 0; x < angulos.length; x++) {
            double y = funcao.apply(x);
            if (y < limInf || y > limSup) {
                dentroLimites = false;
                break;
            }
        }

        addInfoContent(String.format("A Função %s %s dentro dos limites estabelecidos [%.1f, %.1f]", cmbFuncao.getSelectedItem(), dentroLimites ? "ESTÁ" : "NÃO ESTÁ", limInf, limSup));
    }//GEN-LAST:event_btnTestarLimitesActionPerformed

    private void btnNovoNeuronioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoNeuronioActionPerformed
        try {
            initModelo();
            atualizaGraficoComNeuronio();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnNovoNeuronioActionPerformed

    private void atualizaGraficoComNeuronio() {
        double[] ys2 = ProgramAdaline.getY(angulos, funcao);
        s2Series.replaceData(angulos, ys2, null);
        chartPanel.repaint();
    }

    private void addInfoContent(String info) {
        chart.addInfoContent(info);
        List<String> infoContent = chart.getInfoContent();
        if (infoContent.size() > 3) {
            infoContent.remove(0);
        }
        chartPanel.repaint();
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                // System.out.println(info.getName());
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplicacaoAdaline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplicacaoAdaline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplicacaoAdaline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplicacaoAdaline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplicacaoAdaline().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNovoNeuronio;
    private javax.swing.JButton btnTestarLimites;
    private javax.swing.JComboBox<String> cmbFuncao;
    private javax.swing.JLabel lblLimInf;
    private javax.swing.JLabel lblLimSup;
    private javax.swing.JLabel lblMaxCiclos;
    private javax.swing.JLabel lblN;
    private javax.swing.JLabel lblTaxa;
    private javax.swing.JPanel pnlControles;
    private javax.swing.JPanel pnlFuncoes;
    private javax.swing.JPanel pnlGrafico;
    private javax.swing.JPanel pnlNeuronio;
    private javax.swing.JSpinner spnLimInf;
    private javax.swing.JSpinner spnLimSup;
    private javax.swing.JSpinner spnN;
    private javax.swing.JTextField txtMaxCiclos;
    private javax.swing.JTextField txtTaxa;
    // End of variables declaration//GEN-END:variables

    public double fn(double x) {
        return neuronio.getSaida(new double[]{1, ProgramAdaline.f1(x), ProgramAdaline.f2(x), ProgramAdaline.f3(x)});
    }

    public static double f4(double k, double x) {
        return sin(x * PI / 180) * k;
    }

    public static double f5(double k, double x) {
        return cos(x * PI / 180) * k;
    }

    public static double f6(double k, double x) {
        return x * PI / 180 * k;
    }

    public double f7(double x) {
        return neuronio.getSaida(new double[]{1, f4(0.8, x), f5(0.9, x), f6(1.1, x)});
    }

    public double f8(double x) {
        return neuronio.getSaida(new double[]{1, f4(1.0, x), f5(1.0, x), f6(random(), x)});
    }

    public double f9(double x) {
        return neuronio.getSaida(new double[]{1, f4(1.0, x), f5(1.0, x), f6(random() * 2.4, x)});
    }

    public double f10(double x) {
        return neuronio.getSaida(new double[]{1, f4(1.0, x), f5(random() * 2.4, x), f6(1.0, x)});
    }

    public double f11(double x) {
        return neuronio.getSaida(new double[]{1, f4(f5(1.3, x), x), f5(f4(1.2, x), x), f6(0.8, x)});
    }

    public double f12(double x) {
        return neuronio.getSaida(new double[]{1, f4(5.9, x), f5(1.2, x), f6(0.4, x)});
    }

    public double f13(double x) {
        return neuronio.getSaida(new double[]{1, f4(random() * 5.9, x), f5(1.2, x), f6(0.4, x)});
    }

}
